// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/21/2022 01:59:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Arquivo_principal
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Arquivo_principal_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
// wires                                               
wire dig1;
wire dig2;
wire dig3;
wire dig4;
wire dig_a;
wire dig_b;
wire dig_c;
wire dig_d;
wire dig_e;
wire dig_f;
wire dig_g;
wire led_azu;
wire led_verd;
wire led_verme;
wire ponto;

// assign statements (if any)                          
Arquivo_principal i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.dig1(dig1),
	.dig2(dig2),
	.dig3(dig3),
	.dig4(dig4),
	.dig_a(dig_a),
	.dig_b(dig_b),
	.dig_c(dig_c),
	.dig_d(dig_d),
	.dig_e(dig_e),
	.dig_f(dig_f),
	.dig_g(dig_g),
	.led_azu(led_azu),
	.led_verd(led_verd),
	.led_verme(led_verme),
	.ponto(ponto)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #120000 1'b0;
	a[3] = #280000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #40000 1'b1;
	a[3] = #40000 1'b0;
	a[3] = #80000 1'b1;
	a[3] = #80000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #40000 1'b1;
	a[2] = #240000 1'b0;
	a[2] = #80000 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #80000 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #160000 1'b1;
	a[2] = #40000 1'b0;
	a[2] = #80000 1'b1;
	a[2] = #40000 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b1;
	a[1] = #80000 1'b0;
	a[1] = #240000 1'b1;
	a[1] = #200000 1'b0;
	a[1] = #120000 1'b1;
	a[1] = #160000 1'b0;
	a[1] = #40000 1'b1;
	a[1] = #80000 1'b0;
	a[1] = #40000 1'b1;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #320000 1'b0;
	a[0] = #160000 1'b1;
	a[0] = #40000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #40000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #40000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #80000 1'b0;
	a[0] = #40000 1'b1;
	a[0] = #40000 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #120000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #80000 1'b0;
	b[3] = #120000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #200000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #40000 1'b1;
	b[3] = #40000 1'b0;
	b[3] = #80000 1'b1;
	b[3] = #40000 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #80000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #40000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #80000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #160000 1'b1;
	b[2] = #160000 1'b0;
	b[2] = #160000 1'b1;
	b[2] = #40000 1'b0;
	b[2] = #40000 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #120000 1'b0;
	b[1] = #120000 1'b1;
	b[1] = #160000 1'b0;
	b[1] = #280000 1'b1;
	b[1] = #120000 1'b0;
	b[1] = #40000 1'b1;
	b[1] = #40000 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
	b[0] = #80000 1'b0;
	b[0] = #80000 1'b1;
	b[0] = #80000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #120000 1'b0;
	b[0] = #80000 1'b1;
	b[0] = #80000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #40000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #120000 1'b0;
	b[0] = #40000 1'b1;
	b[0] = #40000 1'b0;
end 
endmodule

